generator client {
  provider = "prisma-client-js"

  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RateLimiterFlexible {
  key    String    @id
  points Int
  expire DateTime?
}

enum Role {
  CLIENT
  ADMIN
  MODERATOR
  FREELANCER
}

enum KPIRANK {
  BRONZE
  SILVER
  GOLD
  PLATINIUM
  DIAMOND
  CROWN
  ACE
  CONQUERER
}

model User {
  uid                     String    @id @default(cuid())
  username                String    @unique
  fullName                String
  email                   String    @unique
  password                String
  role                    Role      @default(CLIENT)
  otpPassword             String?   @unique
  giveModeratorFullAccess Boolean   @default(false)
  otpPasswordExpiry       DateTime?
  emailVerifiedAt         DateTime?
  createdProjects         Project[]
  phone                   String?   @unique
  tokenVersion            Int       @default(0)
  address                 String?
  detail                  String?
  portfolioUrl            String?
  niche                   String?
  topProjects             String[]  @default([])
  kpi                     Json[]    @default([])
  kpiHistory              Json[]    @default([])
  kpiRank                 KPIRANK   @default(BRONZE)
  projects                Project[] @relation("InterestedFreelancers")
  kpiRankPoints           Int       @default(0)
  selectedProjects        Project[] @relation("SelectedFreelancers")
  trashedBy               String?
  trashedAt               DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@index([trashedAt])
  @@index([trashedBy])
  @@index([uid])
  @@index([username])
  @@index([email])
  @@index([role, createdAt])
  @@index([otpPassword], name: "otp_user_idx")
  @@index([role, username], name: "role_name_user_idx")
}

enum PROJECT_STATUS {
  CANCELLED // project has been cancelled
  PENDING // mean no one has accepted the project yet
  ONGOING // someone has accepted the project and now he/she is working on it
  COMPLETED // progress percentage is 100%
}

enum DIFFICULTY_LEVEL {
  EASY
  MEDIUM
  HARD
}

enum PROJECT_TYPE {
  INHOUSE
  OUTSOURCE
}

model Project {
  id                                    Int              @id @default(autoincrement())
  title                                 String           @unique()
  projectSlug                           String           @unique()
  detail                                String
  niche                                 String
  bounty                                Int
  deadline                              DateTime
  progressPercentage                    Int              @default(0)
  difficultyLevel                       DIFFICULTY_LEVEL @default(EASY)
  projectStatus                         PROJECT_STATUS   @default(PENDING)
  isDeadlineNeedToBeExtend              Boolean          @default(false)
  commentByClientAfterProjectCompletion String?
  starsByClientAfterProjectCompletion   Int?
  projectCompletedOn                    DateTime?
  projectType                           PROJECT_TYPE     @default(INHOUSE)
  trashedBy                             String?
  trashedAt                             DateTime?
  createdAt                             DateTime         @default(now())
  // One-to-Many Relation with Milestones
  milestones                            Milestone[]
  // Foreign relations with client
  clientWhoPostedThisProject            User?            @relation(fields: [clientWhoPostedThisProjectForeignId], references: [uid])
  clientWhoPostedThisProjectForeignId   String?

  // Many-to-Many Relations with Freelancers
  interestedFreelancers User[] @relation("InterestedFreelancers")
  selectedFreelancers   User[] @relation("SelectedFreelancers")

  @@index([trashedAt])
  @@index([trashedBy])
  @@index([difficultyLevel])
  @@index([id])
  @@index([title])
  @@index([deadline])
  @@index([progressPercentage])
  @@index([clientWhoPostedThisProjectForeignId])
  @@index([createdAt])
}

model Milestone {
  id            Int       @id @default(autoincrement())
  mileStoneName String    @unique
  description   String?
  deadline      DateTime
  progress      Int       @default(0)
  projectId     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  trashedBy     String?
  trashedAt     DateTime?

  project Project @relation(fields: [projectId], references: [id])

  @@index([trashedAt])
  @@index([trashedBy])
  @@index([projectId])
  @@index([createdAt])
}

model ContactUs {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  message   String
  createdAt DateTime  @default(now())
  trashedBy String?
  trashedAt DateTime?

  @@index([trashedAt])
  @@index([trashedBy])
  @@index([email])
  @@index([createdAt])
  @@index([message])
  @@map("ContactUs")
}

model Newsletter {
  id                 String  @id @default(cuid())
  email              String  @unique
  subscriptionStatus Boolean @default(true)

  createdAt DateTime @default(now())
}

model ServiceCategory {
  id            String    @id @default(cuid())
  name          String
  subcategories Service[] // One-to-Many relation with Subcategory

  @@index([name, id]) // Composite index to enforce and speed up queries
}

model Service {
  id          String          @id @default(cuid())
  categoryId  String // Explicit index on categoryId for efficient lookups
  name        String
  slug        String          @unique
  description String
  category    ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  detailPage  String?

  @@index([categoryId, name, slug]) // Composite index to enforce and speed upÂ queries
}

model Industry {
  id                     Int     @id @default(autoincrement())
  name                   String  @unique
  subIndustryTitle       String? @unique
  subIndustryDescription String?
  industryDetail         String?
  slug                   String  @unique
}

model Technology {
  id                       Int     @id @default(autoincrement())
  name                     String  @unique
  subTechnologyTitle       String? @unique
  subTechnologyDescription String?
  technologyDetail         String?
  slug                     String  @unique
}

model GetQuote {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  phone     String
  company   String?   @default("")
  address   String
  deadline  String?
  services  String
  detail    String?   @default("")
  createdAt DateTime  @default(now())
  trashedBy String?
  trashedAt DateTime?

  @@index([email])
  @@index([id])
  @@index([createdAt])
  @@index([trashedAt])
  @@index([trashedBy])
  @@map("GetQuote")
}

model CreateServicesForQuote {
  id       Int    @id @default(autoincrement())
  services String
}

enum consultationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ConsultationBooking {
  id          Int                @id @default(autoincrement())
  name        String
  email       String             @unique
  phone       String
  message     String
  bookingDate DateTime           @unique
  status      consultationStatus @default(PENDING)
  address     String
  trashedBy   String?
  trashedAt   DateTime?
  createdAt   DateTime           @default(now())

  @@index([id])
  @@index([email])
  @@index([bookingDate])
  @@index([status])
  @@index([trashedAt])
  @@index([trashedBy])
}

model HireUs {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  phone     String
  company   String?   @default("")
  address   String
  detail    String
  docs      Json[]
  createdAt DateTime  @default(now())
  trashedBy String?
  trashedAt DateTime?

  @@index([email])
  @@index([id])
  @@index([createdAt])
  @@index([trashedAt])
  @@index([trashedBy])
}

model FreeLancersRequest {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  phone           String    @unique
  address         String
  detail          String
  yourPortfolio   String
  niche           String
  yourTopProject1 String
  yourTopProject2 String
  yourTopProject3 String
  isAccepted      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  trashedBy       String?
  trashedAt       DateTime?

  @@index([email])
  @@index([id])
  @@index([phone])
  @@index([createdAt])
  @@index([trashedAt])
  @@index([trashedBy])
}

model NichesForFreelancers {
  id    Int    @id @default(autoincrement())
  niche String
}

// ** Blog post

model BlogPost {
  blogId        Int      @id @default(autoincrement())
  blogTitle     String   @unique
  blogSlug      String   @unique
  blogThumbnail String
  blogOverview  String
  blogBody      String
  isPublished   Boolean  @default(true)
  createdAt     DateTime @default(now())

  @@index([blogId])
  @@index([blogTitle])
  @@index([blogSlug])
  @@index([createdAt])
  @@index([blogBody])
  @@map("blogposts")
}
